name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.cache-key }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Cache node modules
      id: cache-key
      uses: actions/cache@v4
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install

    - name: Run tests
      env:
          TEST_AUTH_USER: ${{ secrets.TEST_AUTH_USER }}
          TEST_AUTH_PASSWORD: ${{ secrets.TEST_AUTH_PASSWORD }}
      run: yarn test

  build:
    runs-on: ubuntu-latest
    needs: [setup-and-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Use cached dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/yarn
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install dependencies
      run: yarn install

    - name: Build project
      run: yarn build

    - name: Upload dist folder
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: ./dist

  docker:
    runs-on: ubuntu-latest
    needs: [setup-and-test, build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: "Login via Docker Hub"
      uses: docker/login-action@v2
      with:
        username: ${{ vars.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Download dist folder
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: ./dist

    - name: Build Docker image
      run: docker build -t onlineeric/eric-express-ts:${{ github.sha }} -t onlineeric/eric-express-ts:latest .

    - name: Push Docker image
      run: docker push --all-tags onlineeric/eric-express-ts

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: "eric-express-ts"
        slot-name: "production"
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: onlineeric/eric-express-ts:latest
